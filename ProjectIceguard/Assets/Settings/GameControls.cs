//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""3afbe108-b536-46cd-9baa-412471560bd3"",
            ""actions"": [
                {
                    ""name"": ""OrbitMouse"",
                    ""type"": ""Value"",
                    ""id"": ""e8379afa-8ff1-4947-8fe2-65051b14f655"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OrbitGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""00a10382-4e9f-4d41-997e-2cbbeb656057"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OrbitMouseActivate"",
                    ""type"": ""Button"",
                    ""id"": ""64037fdd-8de2-4fd5-89b4-b7e601966517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""3f5543c0-e2ba-456e-bbca-c12c6eae9f44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84e349d3-73c0-42d1-bb47-b1813543faa2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OrbitMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad8ceb28-07be-4ad3-811e-05955d5d52ef"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OrbitGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb59ea48-5d7c-438a-af7f-db0cb3be68b0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OrbitMouseActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""892bf7dd-d4ff-43bf-89cf-ab415e81555d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_OrbitMouse = m_Camera.FindAction("OrbitMouse", throwIfNotFound: true);
        m_Camera_OrbitGamepad = m_Camera.FindAction("OrbitGamepad", throwIfNotFound: true);
        m_Camera_OrbitMouseActivate = m_Camera.FindAction("OrbitMouseActivate", throwIfNotFound: true);
        m_Camera_Click = m_Camera.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_OrbitMouse;
    private readonly InputAction m_Camera_OrbitGamepad;
    private readonly InputAction m_Camera_OrbitMouseActivate;
    private readonly InputAction m_Camera_Click;
    public struct CameraActions
    {
        private @GameControls m_Wrapper;
        public CameraActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OrbitMouse => m_Wrapper.m_Camera_OrbitMouse;
        public InputAction @OrbitGamepad => m_Wrapper.m_Camera_OrbitGamepad;
        public InputAction @OrbitMouseActivate => m_Wrapper.m_Camera_OrbitMouseActivate;
        public InputAction @Click => m_Wrapper.m_Camera_Click;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @OrbitMouse.started += instance.OnOrbitMouse;
            @OrbitMouse.performed += instance.OnOrbitMouse;
            @OrbitMouse.canceled += instance.OnOrbitMouse;
            @OrbitGamepad.started += instance.OnOrbitGamepad;
            @OrbitGamepad.performed += instance.OnOrbitGamepad;
            @OrbitGamepad.canceled += instance.OnOrbitGamepad;
            @OrbitMouseActivate.started += instance.OnOrbitMouseActivate;
            @OrbitMouseActivate.performed += instance.OnOrbitMouseActivate;
            @OrbitMouseActivate.canceled += instance.OnOrbitMouseActivate;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @OrbitMouse.started -= instance.OnOrbitMouse;
            @OrbitMouse.performed -= instance.OnOrbitMouse;
            @OrbitMouse.canceled -= instance.OnOrbitMouse;
            @OrbitGamepad.started -= instance.OnOrbitGamepad;
            @OrbitGamepad.performed -= instance.OnOrbitGamepad;
            @OrbitGamepad.canceled -= instance.OnOrbitGamepad;
            @OrbitMouseActivate.started -= instance.OnOrbitMouseActivate;
            @OrbitMouseActivate.performed -= instance.OnOrbitMouseActivate;
            @OrbitMouseActivate.canceled -= instance.OnOrbitMouseActivate;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnOrbitMouse(InputAction.CallbackContext context);
        void OnOrbitGamepad(InputAction.CallbackContext context);
        void OnOrbitMouseActivate(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
